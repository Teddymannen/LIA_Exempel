h1 {
    font-size: 180%;
}
h2 {
    font-size: 160%;
}
h3 {
    font-size: 140%;
}
h4 {
    font-size: 120%;
}
h5 {
    font-size: 100%;
}
h6 {
    font-size: 80%;
}
header {
    background-color: skyblue;
    padding: 5px;
}
section {
    background-color: lightgray;
    padding: 5px;
}
footer {
    background-color: darkblue;
    color: white;
    padding: 5px;
}
/* ---Prefixing---
* You might need to use prefixes for safari and some other browsers for everything
* to work. You can either put your css into a codepen(http://codepen.io/) and use
* an autoprefixer there or check out http://shouldiprefix.com/#flexbox.
* If that doesn't work just google "flexbox prefixing" and you should find a solution.
*
* As of this writing, I am using Chrome version 45.0.2454.101 to test my code.
* I suggest Chrome or FireFox for testing but IE should be up to date as well.
*/

/* ===EXAMPLE 1===
* Lets start off by defining a flexbox "container".
* We do that by setting "display: flex"
*/
div.flexbox {
    display: flex; /* flex | inline-flex */
}
/* This makes it so our div beceomes a flexbox container.
* If you try this out yourself, you might notice that the items in the container
* becomes aligned in a row. This is the default state but can be changed with "flex-direction"
*/
div.ex1 {
    flex-direction: row; /* row(default) | row-reverse | column | column-reverse */
}
/* row-reverse and column-reverse changes the items direction in the current flexbox.
* Any other direction-oriented design-choices while using a "-reverse" value will
* become reversed.
*
* Normally, the items in your flexbox will try to fit into one single line.
* This can be changed with "flex-wrap" so that the items stack up on top of each other instead.
* You can even decide the direction in which they are getting stacked.
*/
div.ex1 {
    flex-wrap: wrap; /* nowrap(default) | wrap | wrap-reverse */
}
/* Depending on your windows' size you won't see any difference using either nowrap or wrap.
* Try resizing your window and you should see the items getting stacked if you use the value wrap.
*
* There's a shorthand property you can use instead of "flex-direction" and "flex-wrap"
* that is called "flex-flow".
* It can look like this: "flex-flow: row nowrap(default)". But you can of course
* replace any of the values with their respective alternatives. If you skip to use
* one of them, the default will be used("flex-flow: wrap" is the same as
* "flex-flow: row wrap")
*/

/* ===EXAMPLE 2===
* This time we'll look more into how the content inside of our flexbox container is displayed
* A common technique(in my experience at least) used is 'justify-content'.
* It's a really good tool for changing the alignment of items in the main axis.
* Let's try it out!
*/
div.ex2 {
    justify-content: flex-start; /* flex-start(default) | flex-end | center | space-between | space-around */
}
/* flex-start: pack all the items to the start line.
* flex-end: pack all items to the end line.
* center: simply center the items on the line.
* space-between: distributes the items evenly with the same amount of space, as well as putting the first item at the start and the last item at the end.
* space-around: distributes the items evenly with the same amount of space. The space is not visually equal since every item has the same space. At the start and the end there will be shorter space than the rest items because the space add up with each other.
*
* Sidenote: If you don't see any difference you may have to increase the width of the window. This is because justify-content only uses the extra space to align the items.
*/

/* To change the alignment of the items on the cross axis we use 'align-items'.
*/
div.ex2 {
    align-items: center; /* flex-start | flex-end | center | baseline | stretch(default) */
}
/* flex-start: places the cross-start margin edge of the items on the cross-start line.
* flex-end: places the cross-end margin edge of the items on the cross-end line.
* center: centers the items in the cross-axis.
* baseline: places the items along the baselane of each element(for example, the bottom line of a h2-element will be aligned with the bottom line of a p-element, not matter the size of either).
* strech: stretches the items to fill the container(still takes min/max-width into consideration).
*/

/* ===EXAMPLE 3===
* In our third example, we'll go through 'align-content'.
* Usually you don't need to define width or height for flexbox to shine(even though you'll probably do that when creating your own pages it's not actually needed).
* But for 'align-content' to be noticeable we'll set a static width and height because the property has no effect on only one line of items.
*/
div.ex3 {
    height: 800px;
    width: 300px;
    padding: 10px;
    border: 1px solid gray; /* For it to be easier to see the outline */
}
/* We also need to set the 'flex-flow' to 'row wrap'
*/
div.ex3 {
    flex-flow: row wrap;
}
/* Then finally we can try out any of the different values for 'align-content'
*/
div.ex3 {
    align-content: space-around; /* flex-start | flex-end | center | stretch(default) | space-between | space-around */
}
/* The values work about the same as for 'justify-content' and 'align-items'.
*/

/* ===EXAMPLE 4===
* And now we'll go through the properties of the flex-items.
* Normally, flex items appear in the same order as you wrote them in your html-document.
* With the property 'order' we can easily change that.
*/
div.ex4 {
    flex-flow: column nowrap;
    width: 500px;
    height: 500px;
}
div.ex4 header {
    order: 3; /* normally the first item to be displayed */
}
div.ex4 section {
    order: 1; /* normally the second item to be displayed */
}
div.ex4 footer {
    order: 2; /* normally the third item to be displayed */
}
/* Note: negative integer-values work as well. */

/* ===EXAMPLE 5===
* Flex-items can be set to grow if needed(for example, to fill out available space with a container).
* This is done with the property 'flex-grow'.
* It can even be used to evenly distribute items and their size in proportion to other items in the same flexbox container.
* If you set flex-grow to 1 for all items, they will take up equal space. And if you make one item have flex-grow 2 for example, that item will take up twice of the overflowing space as the other items.
*/
div.ex5 header {
    flex-grow: 1; /* default 0 */
}
div.ex5 section {
    flex-grow: 3; /* default 0, this item will grow more */
}
div.ex5 footer {
    flex-grow: 1; /* default 0 */
}
/* You can use "flex-shrink: <number>" to make certain flex-items shrink(and take up more of the extra space) more than other items.
*/
div.ex5 header {
    flex-shrink: 1; /* default 1 */
}
div.ex5 section {
    flex-shrink: 1; /* default 1 */
}
div.ex5 footer {
    flex-shrink: 3; /* default 1, this item will shrink more */
}
/* Negative values are invalid. */

/* It's not easy to show how 'flex-shrink' work in action.
* To demonstrate it easier we'll use 'flex-basis', which is a property that sets the initial size of an element before remaining space is distributed(if at all).
* "flex-basis: <length> | auto;"
*/
div.ex5 header {
    flex-basis: 10em; /* default auto */
}
div.ex5 section {
    flex-basis: 10em; /* default auto */
}
div.ex5 footer {
    flex-basis: 10em; /* default auto */
}
/* We set the 'flex-basis' to 10em. So whenever the window becomes 30em or wider, the items will grow acording to the 'flex-grow'.
* If the window becomes less than 30em wide, the items will shrink acording to the values of 'flex-shrink'.
*
* So try changing the width of your window and change the values to easier understand the properties.
* Also, if you set 'flex-basis' to 0, the extra space around content won't be factored in distribution.
* While auto make it so the extra space distributes based on the 'flex-grow' value.
* Like this: http://www.w3.org/TR/css3-flexbox/images/rel-vs-abs-flex.svg
*
* To make things even easier, there is a shorthand for 'flex-grow', 'flex-shrink' and 'flex-basis'.
* It's written like this: "flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]"
* The default is "flex: 0 1 auto;" but 'flex-shrink' and 'flex-basis' are both optional. You can use any, none or both of them.
* I highly recommend you to use the shorthand property instead of the individual ones.
*/
